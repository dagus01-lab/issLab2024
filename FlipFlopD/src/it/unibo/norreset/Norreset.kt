/* Generated by AN DISI Unibo */ 
package it.unibo.norreset

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Norreset ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var i1=false
				var i2=false
				var RES = !(i1 || i2)	
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleoni1",cond=whenDispatch("oni1"))
					transition(edgeName="t010",targetState="handleoni2",cond=whenDispatch("oni2"))
					transition(edgeName="t011",targetState="handleoffi1",cond=whenDispatch("offi1"))
					transition(edgeName="t012",targetState="handleoffi2",cond=whenDispatch("offi2"))
				}	 
				state("set") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_set", 
				 	 					  scope, context!!, "local_tout_"+name+"_set", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t013",targetState="emitoutput",cond=whenTimeout("local_tout_"+name+"_set"))   
					transition(edgeName="t014",targetState="handleoni1",cond=whenDispatch("oni1"))
					transition(edgeName="t015",targetState="handleoni2",cond=whenDispatch("oni2"))
					transition(edgeName="t016",targetState="handleoffi1",cond=whenDispatch("offi1"))
					transition(edgeName="t017",targetState="handleoffi2",cond=whenDispatch("offi2"))
				}	 
				state("handleoni1") { //this:State
					action { //it:State
						
								i1=true
								RES = !(i1 || i2)	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set", cond=doswitch() )
				}	 
				state("handleoffi1") { //this:State
					action { //it:State
						
								i1=false
								RES = !(i1 || i2)	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set", cond=doswitch() )
				}	 
				state("handleoni2") { //this:State
					action { //it:State
						
								i2=true
								RES = !(i1 || i2)	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set", cond=doswitch() )
				}	 
				state("handleoffi2") { //this:State
					action { //it:State
						
								i2=false
								RES = !(i1 || i2)	
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set", cond=doswitch() )
				}	 
				state("emitoutput") { //this:State
					action { //it:State
						CommUtils.outblack("Ingressi Nor Reset: $i1 $i2")
						emit("output", "output($RES)" ) 
						if(  RES  
						 ){forward("oni1", "oni1(1)" ,"norset" ) 
						}
						else
						 {forward("offi1", "offi1(1)" ,"norset" ) 
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="set", cond=doswitch() )
				}	 
			}
		}
} 

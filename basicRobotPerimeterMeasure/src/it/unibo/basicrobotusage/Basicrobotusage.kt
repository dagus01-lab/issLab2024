/* Generated by AN DISI Unibo */ 
package it.unibo.basicrobotusage

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Basicrobotusage ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "ss0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 
				val MyName = name 
				var corners = 0
		return { //this:ActionBasciFsm
				state("ss0") { //this:State
					action { //it:State
						delay(3000) 
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						request("engage", "engage(MyName,350)" ,"basicrobot" )  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t028",targetState="startmeasure",cond=whenReply("engagedone"))
				}	 
				state("startmeasure") { //this:State
					action { //it:State
						forward("startMeasure", "startMeasure(0)" ,"perimetermeasure" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="dostep", cond=doswitch() )
				}	 
				state("dostep") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( corners<4 
						 ){request("step", "step(350)" ,"basicrobot" )  
						}
						else
						 {forward("disengage", "disengage($MyName)" ,"basicrobot" ) 
						 request("getPerimeter", "getPerimeter(0)" ,"perimetermeasure" )  
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="dowork", cond=doswitch() )
				}	 
				state("dowork") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t029",targetState="handlesonardata",cond=whenEvent("sonardata"))
					transition(edgeName="t030",targetState="handleStepDone",cond=whenReply("stepdone"))
					transition(edgeName="t031",targetState="handleStepFail",cond=whenReply("stepfailed"))
					transition(edgeName="t032",targetState="handlePerimeterMeasureEnd",cond=whenReply("perimeter"))
				}	 
				state("handlesonardata") { //this:State
					action { //it:State
						delay(3000) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="dowork", cond=doswitch() )
				}	 
				state("handleStepDone") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="dostep", cond=doswitch() )
				}	 
				state("handleStepFail") { //this:State
					action { //it:State
						CommUtils.outblack("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						forward("cmd", "cmd(a)" ,"basicrobot" ) 
						 corners+=1  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="dostep", cond=doswitch() )
				}	 
				state("handlePerimeterMeasureEnd") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("perimeter(N)"), Term.createTerm("perimeter(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 val perimeter = payloadArg(0).toInt()  
								CommUtils.outblack("Total perimeter: $perimeter")
						}
						CommUtils.outblack("End of measure")
						System.exit(0) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.referee

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Referee ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 var N = 0; val TOBSMAX=3000L  
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name STARTS")
						observeResource("localhost","8020","ctxtest","ping","ballview")
						observeResource("localhost","8020","ctxtest","pong","ballview")
						emit("startgame", "startgame(start)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_s0", 
				 	 					  scope, context!!, "local_tout_"+name+"_s0", TOBSMAX )  //OCT2023
					}	 	 
					 transition(edgeName="t07",targetState="gameended",cond=whenTimeout("local_tout_"+name+"_s0"))   
					transition(edgeName="t08",targetState="updateinfoongame",cond=whenDispatch("ballview"))
				}	 
				state("updateinfoongame") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("ball(N)"), Term.createTerm("ball(X)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								 N = payloadArg(0).toInt()  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_updateinfoongame", 
				 	 					  scope, context!!, "local_tout_"+name+"_updateinfoongame", TOBSMAX )  //OCT2023
					}	 	 
					 transition(edgeName="t09",targetState="gameended",cond=whenTimeout("local_tout_"+name+"_updateinfoongame"))   
					transition(edgeName="t010",targetState="updateinfoongame",cond=whenDispatch("ballview"))
				}	 
				state("gameended") { //this:State
					action { //it:State
						CommUtils.outmagenta("$name waits for request")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_gameended", 
				 	 					  scope, context!!, "local_tout_"+name+"_gameended", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t011",targetState="endgame",cond=whenTimeout("local_tout_"+name+"_gameended"))   
				}	 
				state("endgame") { //this:State
					action { //it:State
						emit("stopgame", "stopgame(stop)" ) 
						delay(2000) 
						CommUtils.outred("Game end")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_endgame", 
				 	 					  scope, context!!, "local_tout_"+name+"_endgame", 2000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t012",targetState="endsystem",cond=whenTimeout("local_tout_"+name+"_endgame"))   
					transition(edgeName="t013",targetState="handleinfo",cond=whenRequest("info"))
				}	 
				state("handleinfo") { //this:State
					action { //it:State
						answer("info", "obsinfo", "obsinfo($N)"   )  
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
				state("endsystem") { //this:State
					action { //it:State
						 System.exit(0)  
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

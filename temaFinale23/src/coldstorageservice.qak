System coldstorageservice

Request store:store(N)
Reply storeAccepted:storeAccepted(motivazione)
Reply storeRefused:storeRefused(motivazione)

Request load:load(N)
Reply loadAccepted:loadAccepted(motivazione)
Reply loadRefused:loadRefused(motivazione)

Context ctxroom ip [host="localhost" port=8088]

QActor coldroom context ctxroom{
	[#
		val MAXW = 50
		val curWeight = 0
	#]
	State s0 initial{
		println("$name STARTS") color red
	}
	
}

QActor coldstorageservice context ctxroom{	
	[#
		val RD = 5
		val lr = 100
		val lf = 100
		val INDOOR = 20
		val HOME = 30
		val PORT = 15
		val cr_x0 = 40
		val cr_y = 40
		val cr_h = 10
		val PORT = 20
		
		val indoorCoordinates = [0,lf,INDOOR,lf]
		val coldRoomCoordinates = [cr_x0,cr_y,cr_x0+PORT,cr_y+cr_h]
		val homeCoordinates = [0,0,HOME,RD]
	#]
	State s0 initial{
		println("$name STARTS") color blue
	}
	Transition t0 whenRequest store -> handleStoreRequest
					whenRequest load -> handleLoadRequest
	State handleStoreRequest {
		printCurrentMessage
		replyTo store with storeAccepted:storeAccepted(1)
	}
	Transition t0 whenRequest store -> handleStoreRequest
					whenRequest load -> handleLoadRequest
	State handleLoadRequest {
		printCurrentMessage
		replyTo load with loadAccepted:loadAccepted(1)
	}
	Transition t0 whenRequest store -> handleStoreRequest
					whenRequest load -> handleLoadRequest
} 

QActor drivermock context ctxroom {
	State s0 initial{
		println("$name STARTS") color red
		request coldstorageservice -m store:store(4)
		delay 1000
	}
}

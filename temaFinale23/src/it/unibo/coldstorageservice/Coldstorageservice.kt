/* Generated by AN DISI Unibo */ 
package it.unibo.coldstorageservice

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Coldstorageservice ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				val RD = 5
				val MAXW = 50
				val curWeight = 0
				val lr = 100
				val lf = 100
				val INDOOR = 20
				val HOME = 30
				val PORT = 15
				val cr_x0 = 40
				val cr_y = 40
				val cr_h = 10
				val PORT = 20
				
				val indoorCoordinates = [0,lf,INDOOR,lf]
				val coldRoomCoordinates = [cr_x0,cr_y,cr_x0+PORT,cr_y+cr_h]
				val homeCoordinates = [0,0,HOME,RD]
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
				}	 
			}
		}
} 

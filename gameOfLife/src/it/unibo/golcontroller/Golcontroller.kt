/* Generated by AN DISI Unibo */ 
package it.unibo.golcontroller

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.resources.GridSupport

class Golcontroller ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var updatedCells = 0
				var cellsNum = 0
				var stalemate = true
				var Round = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outblue("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleGameReady",cond=whenEvent("gameReady"))
				}	 
				state("handleGameReady") { //this:State
					action { //it:State
						
									cellsNum = GridSupport.conf.rows*GridSupport.conf.columns
									main.resources.GridSupport.observeAllCells(myself, context!!.name, "cellUpdate")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitForGameToStart", cond=doswitch() )
				}	 
				state("waitForGameToStart") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t05",targetState="handleGameStart",cond=whenDispatch("gameStart"))
				}	 
				state("handleGameStart") { //this:State
					action { //it:State
						CommUtils.outblue("$name | game started")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						CommUtils.outblack("$name | ROUND $Round")
						
									Round += 1
									updatedCells = 0
									stalemate = true
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
				 	 		stateTimer = TimerActor("timer_wait", 
				 	 					  scope, context!!, "local_tout_"+name+"_wait", 1000.toLong() )  //OCT2023
					}	 	 
					 transition(edgeName="t06",targetState="letCellsUpdate",cond=whenTimeout("local_tout_"+name+"_wait"))   
					transition(edgeName="t07",targetState="waitForGameToStart",cond=whenDispatch("gameStop"))
				}	 
				state("letCellsUpdate") { //this:State
					action { //it:State
						emit("nextCellUpdate", "nextCellUpdate(1)" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingCellsToBeReady", cond=doswitch() )
				}	 
				state("waitingCellsToBeReady") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t08",targetState="handleCellUpdate",cond=whenDispatch("cellUpdate"))
				}	 
				state("handleCellUpdate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellUpdate(C,S)"), Term.createTerm("cellUpdate(C,N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( payloadArg(1)!= "nonews" 
								 ){	
													var status = payloadArg(1).toBoolean()
													if(status){
														stalemate = false
													}
													updatedCells += 1
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="checkIfStalemate", cond=doswitchGuarded({updatedCells == cellsNum 
					}) )
					transition( edgeName="goto",targetState="waitingCellsToBeReady", cond=doswitchGuarded({! (updatedCells == cellsNum 
					) }) )
				}	 
				state("checkIfStalemate") { //this:State
					action { //it:State
						if( stalemate 
						 ){CommUtils.outblue("$name | STALEMATE!")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 

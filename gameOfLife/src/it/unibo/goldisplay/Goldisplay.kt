/* Generated by AN DISI Unibo */ 
package it.unibo.goldisplay

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.resources.GridSupport

class Goldisplay ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		 val display = main.java.GoLGui()
		var gameStarted = false 
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | STARTS")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t00",targetState="setupGUI",cond=whenEvent("gameReady"))
				}	 
				state("setupGUI") { //this:State
					action { //it:State
						 main.resources.GridSupport.observeAllCells(myself, context!!.name, "cellUpdate")  
						 kotlin.concurrent.thread(start = true) { 
									 display.initialize(myself, GridSupport.conf.rows, GridSupport.conf.columns, GridSupport.conf.cellSize)  //launch javafx.application.Application
								   }
						forward("guidone", "guidone(1)" ,"golinitializer" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t01",targetState="handleGUIcmd",cond=whenDispatch("guicmd"))
					transition(edgeName="t02",targetState="handleCellUpdate",cond=whenDispatch("cellUpdate"))
				}	 
				state("handleGUIcmd") { //this:State
					action { //it:State
						CommUtils.outred("$name | received new update from GUI")
						if( checkMsgContent( Term.createTerm("guicmd(C)"), Term.createTerm("guicmd(startthegame)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("gameStart", "gameStart(1)" ,"golcontroller" ) 
								gameStarted = true 
						}
						if( checkMsgContent( Term.createTerm("guicmd(C)"), Term.createTerm("guicmd(stopthegame)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								forward("gameStop", "gameStop(1)" ,"golcontroller" ) 
								gameStarted = false 
						}
						if( checkMsgContent( Term.createTerm("guicmd(C)"), Term.createTerm("guicmd(click(X,Y))"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( !gameStarted 
								 ){ 
									        		var x = payloadArg(0).split("(")[1].split(",")[0]
									        		var y = payloadArg(0).split("(")[1].split(",")[1].split(")")[0]
									        		
									        		val cellName = "cellc_${x}_${y}"  
									         		forward( "switchstate", "switchstate(ok)", cellName)         		
								}
						}
						if( checkMsgContent( Term.createTerm("guicmd(C)"), Term.createTerm("guicmd(clear)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								emit("clearCells", "clearCells(1)" ) 
								gameStarted = false 
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("handleCellUpdate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellUpdate(C,S)"), Term.createTerm("cellUpdate(C,N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( payloadArg(1)!= "nonews" 
								 ){
													var cell = payloadArg(0)
													var state = payloadArg(1).toBoolean()
													var x = cell.split("_")[1].toInt()
													var y = cell.split("_")[2].toInt()
								if( state 
								 ){display.cellOn(x, y) 
								}
								else
								 {display.cellOff(x, y) 
								 }
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 

/* Generated by AN DISI Unibo */ 
package it.unibo.cell

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023
//Sept2024
import org.slf4j.Logger
import org.slf4j.LoggerFactory 
import org.json.simple.parser.JSONParser
import org.json.simple.JSONObject


//User imports JAN2024
import main.resources.GridSupport

class Cell ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		
				var MyState = false
				var numNeighbors = 0
				var numNeighborsOn = 0	
				var numUpdates = 0
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outyellow("$name | STARTS")
						var Name=name 
						forward("cellReady", "cellReady($Name)" ,"golinitializer" ) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t09",targetState="handleGameReady",cond=whenEvent("gameReady"))
				}	 
				state("handleGameReady") { //this:State
					action { //it:State
						numNeighbors = main.resources.GridSupport.observeNeighborCells(myself, context!!.name, "cellUpdate") 
						CommUtils.outyellow("$name | initialized with $numNeighbors neighbors")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("wait") { //this:State
					action { //it:State
						
									numNeighborsOn = 0
									numUpdates = 0
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t010",targetState="uploadState",cond=whenEvent("nextCellUpdate"))
					transition(edgeName="t011",targetState="handleSwitchState",cond=whenDispatch("switchstate"))
				}	 
				state("handleSwitchState") { //this:State
					action { //it:State
						MyState = !MyState 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
				state("uploadState") { //this:State
					action { //it:State
						updateResourceRep("$MyState" 
						)
						delay(10) 
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="waitingForMoreUpdates", cond=doswitch() )
				}	 
				state("waitingForMoreUpdates") { //this:State
					action { //it:State
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t012",targetState="handleCellUpdate",cond=whenDispatch("cellUpdate"))
				}	 
				state("handleCellUpdate") { //this:State
					action { //it:State
						if( checkMsgContent( Term.createTerm("cellUpdate(C,S)"), Term.createTerm("cellUpdate(C,N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								if( payloadArg(1)!="nonews" 
								 ){
													numUpdates += 1
													var state = payloadArg(1).toBoolean()
								if( state 
								 ){numNeighborsOn +=1 
								}
								}
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="updateStatus", cond=doswitchGuarded({numUpdates == numNeighbors 
					}) )
					transition( edgeName="goto",targetState="waitingForMoreUpdates", cond=doswitchGuarded({! (numUpdates == numNeighbors 
					) }) )
				}	 
				state("updateStatus") { //this:State
					action { //it:State
						if( MyState == true 
						 ){if( numNeighborsOn < 2 || numNeighborsOn > 3 
						 ){MyState = false 
						}
						}
						else
						 {if( numNeighborsOn==3 
						  ){MyState = true 
						 }
						 }
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition( edgeName="goto",targetState="wait", cond=doswitch() )
				}	 
			}
		}
} 

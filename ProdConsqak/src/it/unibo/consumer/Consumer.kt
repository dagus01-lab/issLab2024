/* Generated by AN DISI Unibo */ 
package it.unibo.consumer

import it.unibo.kactor.*
import alice.tuprolog.*
import unibo.basicomm23.*
import unibo.basicomm23.interfaces.*
import unibo.basicomm23.utils.*
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.runBlocking
import it.unibo.kactor.sysUtil.createActor   //Sept2023

//User imports JAN2024

class Consumer ( name: String, scope: CoroutineScope, isconfined: Boolean=false  ) : ActorBasicFsm( name, scope, confined=isconfined ){

	override fun getInitialState() : String{
		return "s0"
	}
	override fun getBody() : (ActorBasicFsm.() -> Unit){
		//val interruptedStateTransitions = mutableListOf<Transition>()
		return { //this:ActionBasciFsm
				state("s0") { //this:State
					action { //it:State
						CommUtils.outred("$name START")
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t02",targetState="handleFd",cond=whenDispatch("msgFd"))
					transition(edgeName="t03",targetState="handleRq",cond=whenRequest("msgRq"))
				}	 
				state("handleRq") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("msgRq(N)"), Term.createTerm("msgRq(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outblue("$name received ${payloadArg(0)}")
								 val risposta = "${payloadArg(0)}" 
								answer("msgRq", "msgRp", "msgRp(risposta)"   )  
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t04",targetState="handleFd",cond=whenDispatch("msgFd"))
					transition(edgeName="t05",targetState="handleRq",cond=whenRequest("msgRq"))
				}	 
				state("handleFd") { //this:State
					action { //it:State
						CommUtils.outcyan("$name in ${currentState.stateName} | $currentMsg | ${Thread.currentThread().getName()} n=${Thread.activeCount()}")
						 	   
						if( checkMsgContent( Term.createTerm("msgFd(N)"), Term.createTerm("msgFd(N)"), 
						                        currentMsg.msgContent()) ) { //set msgArgList
								CommUtils.outyellow("$name received ${payloadArg(0)}")
						}
						//genTimer( actor, state )
					}
					//After Lenzi Aug2002
					sysaction { //it:State
					}	 	 
					 transition(edgeName="t06",targetState="handleFd",cond=whenDispatch("msgFd"))
					transition(edgeName="t07",targetState="handleRq",cond=whenRequest("msgRq"))
				}	 
			}
		}
} 
